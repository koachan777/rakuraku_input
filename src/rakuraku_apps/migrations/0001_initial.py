# Generated by Django 4.1.7 on 2024-09-03 10:26

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='ShrimpModel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('modified_at', models.DateTimeField(auto_now=True)),
                ('family', models.CharField(max_length=64, verbose_name='系統')),
            ],
            options={
                'verbose_name': '系統',
                'db_table': 'shrimp',
            },
        ),
        migrations.CreateModel(
            name='TankModel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('modified_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=64, verbose_name='名前')),
                ('shrimp', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='tank', to='rakuraku_apps.shrimpmodel', verbose_name='系統')),
            ],
            options={
                'verbose_name': '水槽',
                'db_table': 'tank',
            },
        ),
        migrations.CreateModel(
            name='WaterQualityThresholdModel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('modified_at', models.DateTimeField(auto_now=True)),
                ('parameter', models.CharField(choices=[('water_temperature', '水温'), ('pH', 'pH'), ('DO', 'DO'), ('salinity', '塩分濃度'), ('NH4', 'NH4'), ('NO2', 'NO2'), ('NO3', 'NO3'), ('Ca', 'Ca'), ('Al', 'Al'), ('Mg', 'Mg')], max_length=20, verbose_name='パラメーター')),
                ('reference_value_threshold_max', models.FloatField(blank=True, null=True, verbose_name='基準の上限値')),
                ('reference_value_threshold_min', models.FloatField(blank=True, null=True, verbose_name='基準の下限値')),
                ('previous_day_threshold', models.FloatField(blank=True, null=True, verbose_name='前日との差異閾値')),
            ],
            options={
                'verbose_name': '水質アラート設定',
                'db_table': 'water_quality_threshold',
            },
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('account_id', models.CharField(max_length=10, unique=True, verbose_name='account_id')),
                ('is_superuser', models.BooleanField(default=False, verbose_name='is_superuser')),
                ('is_staff', models.BooleanField(default=False, verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, verbose_name='active')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='created_at')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='updated_at')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='WaterQualityModel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('modified_at', models.DateTimeField(auto_now=True)),
                ('date', models.DateField(verbose_name='計測日')),
                ('room_temperature', models.FloatField(blank=True, null=True, verbose_name='室温')),
                ('water_temperature', models.FloatField(blank=True, null=True, verbose_name='水温')),
                ('pH', models.FloatField(blank=True, null=True, verbose_name='ph')),
                ('DO', models.FloatField(blank=True, null=True, verbose_name='DO')),
                ('salinity', models.FloatField(blank=True, null=True, verbose_name='塩分濃度')),
                ('NH4', models.FloatField(blank=True, null=True, verbose_name='NH4')),
                ('NO2', models.FloatField(blank=True, null=True, verbose_name='NO2')),
                ('NO3', models.FloatField(blank=True, null=True, verbose_name='NO3')),
                ('Ca', models.FloatField(blank=True, null=True, verbose_name='Ca')),
                ('Al', models.FloatField(blank=True, null=True, verbose_name='Al')),
                ('Mg', models.FloatField(blank=True, null=True, verbose_name='Mg')),
                ('notes', models.TextField(blank=True, max_length=512, null=True, verbose_name='備考')),
                ('notify_line', models.BooleanField(default=False)),
                ('tank', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='water_quality', to='rakuraku_apps.tankmodel', verbose_name='水槽')),
            ],
            options={
                'verbose_name': '水質',
                'db_table': 'water_quality',
                'unique_together': {('date', 'tank')},
            },
        ),
    ]
